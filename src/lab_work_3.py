from enum import Enum


# –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ3 –ø–æ —à–∞—Å—Å–∏ (–ú–∞–π—Å–∞–∫ –ú.–í.)


class ChassisType(Enum):
    main = "–æ—Å–Ω–æ–≤–Ω–∞—è"
    nose = "–Ω–æ—Å–æ–≤–∞—è"


# =====================================================

# –¢—É—Ç –º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ:
input_data = {
    "P—Å—Ç.–ø–æ—Å., [–ù]": 80000.0,  # —Å–º. –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    "P—Å—Ç.–≤–∑–ª., [–ù]": 112000.0,  # —Å–º. –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    "n_y_max": 2.18,  # —Å–º. –õ–† ‚Ññ2
    "P–º.–¥., [–ù]": 86450.0,  # —Å–º. –õ–† ‚Ññ1
    "ùõø_–º.–¥., [–º–º]": 94.33,  # —Å–º. –õ–† ‚Ññ1
    "–ö–æ–ª-–≤–æ –∫–æ–ª—ë—Å": 4,
    "–í–∏–¥ —Å—Ç–æ–π–∫–∏": "–æ—Å–Ω–æ–≤–Ω–∞—è"  # –∏–ª–∏ "–Ω–æ—Å–æ–≤–∞—è"
}

# =====================================================


def vertical_strike(landing_load: float, n_y_max: float) -> float:
    """
    –†–∞—Å—á—ë—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º —É–¥–∞—Ä–µ (–ø–æ—Å–∞–¥–∫–∞)

    Args:
            landing_load (float): —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Å–∞–¥–æ—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (P—Å—Ç.–ø–æ—Å.)
            n_y_max (float): –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞
    """

    f = 1.3

    return landing_load * n_y_max * f


def takeoff(takeoff_load: float) -> tuple:
    """
    –†–∞—Å—á—ë—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–µ–≥–µ

    Args:
            takeoff_load (float): —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∑–ª—ë—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (P—Å—Ç.–≤–∑–ª.)
    """

    n_y_takeof = 2
    f = 1.5

    return takeoff_load * n_y_takeof * f, .3 * takeoff_load * n_y_takeof * f


def load_distribution(chassis_type: str, vert_strike_load: float) -> tuple:
    match ChassisType(chassis_type):
        case ChassisType.main:
            return .75 * vert_strike_load, .4 * vert_strike_load
        case ChassisType.nose:
            return vert_strike_load, .25 * vert_strike_load


def side_impact(vert_strike_load: float, wheels_amount: int, chassis_type: str):
    """
    –ü–æ—Å–∞–¥–∫–∞ —Å –±–æ–∫–æ–≤—ã–º —É–¥–∞—Ä–æ–º

    Args:
        vert_strike_load (float): [description]
        wheels_amount (int): [description] (default: `4`)
        chassis_type (str): [description] (default: `"–æ—Å–Ω–æ–≤–Ω–∞—è"`)
    """
    loads = load_distribution(chassis_type, vert_strike_load)

    if wheels_amount == 1:
        return loads
    elif wheels_amount > 1 and wheels_amount % 2 == 0:
        return {"–≤—Å—è —Å—Ç–æ–π–∫–∞": loads,
                "–ª–µ–≤–æ–µ": (loads[0] * (.4 / (wheels_amount / 2)),
                          loads[1] * (.4 / (wheels_amount / 2))),
                "–ø—Ä–∞–≤–æ–µ": ((loads[0] * (.6 / (wheels_amount / 2)),
                            loads[1] * (.6 / (wheels_amount / 2))))}
    else:
        raise ValueError("–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª—ë—Å!")


def chassis_compression(calc_load: tuple):
    """–û–±–∂–∞—Ç–∏–µ
    
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–∂–∞—Ç–∏—è –ø–Ω–µ–≤–º–∞—Ç–∏–∫–∞
    
    Args:
        calc_load (tuple): –Ω–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –ø–æ—Å–∞–¥–∫–µ —Å –±–æ–∫–æ–≤—ã–º —É–¥–∞—Ä–æ–º (Py_–ª–µ–≤, Py_–ø—Ä–∞–≤)

    """
    for load in calc_load:
        yield (load / 1.5) * (input_data["ùõø_–º.–¥., [–º–º]"] / input_data["P–º.–¥., [–ù]"])


if __name__ == '__main__':

    print(f"–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞: \n")

    for i, j in input_data.items():
        print(f"{i} = {j}")

    print("\n1. –†–∞—Å—á—ë—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏:\n")

    print("a. –†–∞—Å—á—ë—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º —É–¥–∞—Ä–µ (–ø–æ—Å–∞–¥–∫–∞):")
    a = vertical_strike(input_data["P—Å—Ç.–ø–æ—Å., [–ù]"], input_data["n_y_max"])
    b = takeoff(input_data["P—Å—Ç.–≤–∑–ª., [–ù]"])

    print(f"Py(E–ø–æ—Å) = {a} [–ù]")

    print("\nb. –†–∞—Å—á—ë—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–µ–≥–µ:")
    print(f"(Py(E–≤–∑–ª), Px(E–≤–∑–ª)) = {b} [–ù]")

    c = side_impact(a, input_data["–ö–æ–ª-–≤–æ –∫–æ–ª—ë—Å"], input_data["–í–∏–¥ —Å—Ç–æ–π–∫–∏"])

    print("\nc. –ü–æ—Å–∞–¥–∫–∞ —Å –±–æ–∫–æ–≤—ã–º —É–¥–∞—Ä–æ–º:")

    if input_data["–ö–æ–ª-–≤–æ –∫–æ–ª—ë—Å"] == 1:
        print(f"(Py, Pz) = {c}")
        print("\n2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–∂–∞—Ç–∏—è –ø–Ω–µ–≤–º–∞—Ç–∏–∫–∞:")
        print(f"ùõø_–ø–Ω = {list(chassis_compression((c[0],)))}")

    else:
        print(f"–í—Å—è —Å—Ç–æ–π–∫–∞: (Py, Pz) = {c['–≤—Å—è —Å—Ç–æ–π–∫–∞']}")
        print(f"–õ–µ–≤–æ–µ –∫–æ–ª–µ—Å–æ: (Py, Pz) = {c['–ª–µ–≤–æ–µ']}")
        print(f"–ü—Ä–∞–≤–æ–µ –∫–æ–ª–µ—Å–æ: (Py, Pz) = {c['–ø—Ä–∞–≤–æ–µ']}")

        print("\n2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–∂–∞—Ç–∏—è –ø–Ω–µ–≤–º–∞—Ç–∏–∫–∞:")
        print(f"(ùõø_–ø–Ω.–ª–µ–≤–æ–µ, ùõø_–ø–Ω.–ø—Ä–∞–≤–æ–µ) = {tuple(chassis_compression((c['–ª–µ–≤–æ–µ'][0], c['–ø—Ä–∞–≤–æ–µ'][0])))}")
